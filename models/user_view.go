// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserView user view
//
// an user object
//
// swagger:model user_view
type UserView struct {

	// address
	//
	// address of user
	// Example: address 1
	// Read Only: true
	Address string `json:"address,omitempty"`

	// audit
	Audit *Audit `json:"audit,omitempty"`

	// device_id
	//
	// device id of user
	// Example: 23244
	// Read Only: true
	DeviceID int64 `json:"device_id,omitempty"`

	// id
	//
	// id of user
	// Example: uuid
	// Read Only: true
	ID string `json:"id,omitempty"`

	// name
	//
	// name of user
	// Example: Username
	// Read Only: true
	Name string `json:"name,omitempty"`

	// phone
	//
	// phone number of user
	// Example: +919873323432
	// Read Only: true
	Phone string `json:"phone,omitempty"`

	// role
	//
	// role of user
	// Example: admin
	// Read Only: true
	// Enum: [admin operator]
	Role string `json:"role,omitempty"`

	// status
	//
	// status of user
	// Example: ACTIVE
	// Read Only: true
	// Enum: [NEW ACTIVE]
	Status string `json:"status,omitempty"`

	// tags
	//
	// tags of user
	// Example: ["tag1","tag2"]
	// Read Only: true
	Tags []string `json:"tags"`
}

// Validate validates this user view
func (m *UserView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserView) validateAudit(formats strfmt.Registry) error {
	if swag.IsZero(m.Audit) { // not required
		return nil
	}

	if m.Audit != nil {
		if err := m.Audit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

var userViewTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","operator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userViewTypeRolePropEnum = append(userViewTypeRolePropEnum, v)
	}
}

const (

	// UserViewRoleAdmin captures enum value "admin"
	UserViewRoleAdmin string = "admin"

	// UserViewRoleOperator captures enum value "operator"
	UserViewRoleOperator string = "operator"
)

// prop value enum
func (m *UserView) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userViewTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserView) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var userViewTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userViewTypeStatusPropEnum = append(userViewTypeStatusPropEnum, v)
	}
}

const (

	// UserViewStatusNEW captures enum value "NEW"
	UserViewStatusNEW string = "NEW"

	// UserViewStatusACTIVE captures enum value "ACTIVE"
	UserViewStatusACTIVE string = "ACTIVE"
)

// prop value enum
func (m *UserView) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userViewTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserView) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user view based on the context it is used
func (m *UserView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAudit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserView) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "address", "body", string(m.Address)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateAudit(ctx context.Context, formats strfmt.Registry) error {

	if m.Audit != nil {
		if err := m.Audit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audit")
			}
			return err
		}
	}

	return nil
}

func (m *UserView) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "device_id", "body", int64(m.DeviceID)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidatePhone(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "phone", "body", string(m.Phone)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "role", "body", string(m.Role)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tags", "body", []string(m.Tags)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserView) UnmarshalBinary(b []byte) error {
	var res UserView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
