// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// an user object
//
// swagger:model user
type User struct {

	// address
	//
	// address of user
	// Example: address 1
	Address string `json:"address,omitempty"`

	// device_id
	//
	// device id of user
	// Example: 23244
	DeviceID int64 `json:"device_id,omitempty"`

	// name
	//
	// name of user
	// Example: Username
	// Min Length: 3
	Name string `json:"name,omitempty"`

	// phone
	//
	// phone number of user
	// Example: +919873323432
	// Max Length: 13
	// Min Length: 10
	Phone string `json:"phone,omitempty"`

	// role
	//
	// role of user
	// Example: admin
	// Enum: [admin operator]
	Role string `json:"role,omitempty"`

	// tags
	//
	// tags of user
	// Example: ["tag1","tag2"]
	Tags []string `json:"tags"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MinLength("phone", "body", m.Phone, 10); err != nil {
		return err
	}

	if err := validate.MaxLength("phone", "body", m.Phone, 13); err != nil {
		return err
	}

	return nil
}

var userTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","operator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeRolePropEnum = append(userTypeRolePropEnum, v)
	}
}

const (

	// UserRoleAdmin captures enum value "admin"
	UserRoleAdmin string = "admin"

	// UserRoleOperator captures enum value "operator"
	UserRoleOperator string = "operator"
)

// prop value enum
func (m *User) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
